=begin
#Coinbase Platform API

#This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

The version of the OpenAPI document: 0.0.1-alpha

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Coinbase::Client
  class FundApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new fund operation.
    # Create a new fund operation with an address.
    # @param wallet_id [String] The ID of the wallet the address belongs to.
    # @param address_id [String] The onchain address to be funded.
    # @param create_fund_operation_request [CreateFundOperationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [FundOperation]
    def create_fund_operation(wallet_id, address_id, create_fund_operation_request, opts = {})
      data, _status_code, _headers = create_fund_operation_with_http_info(wallet_id, address_id, create_fund_operation_request, opts)
      data
    end

    # Create a new fund operation.
    # Create a new fund operation with an address.
    # @param wallet_id [String] The ID of the wallet the address belongs to.
    # @param address_id [String] The onchain address to be funded.
    # @param create_fund_operation_request [CreateFundOperationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundOperation, Integer, Hash)>] FundOperation data, response status code and response headers
    def create_fund_operation_with_http_info(wallet_id, address_id, create_fund_operation_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundApi.create_fund_operation ...'
      end
      # verify the required parameter 'wallet_id' is set
      if @api_client.config.client_side_validation && wallet_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_id' when calling FundApi.create_fund_operation"
      end
      # verify the required parameter 'address_id' is set
      if @api_client.config.client_side_validation && address_id.nil?
        fail ArgumentError, "Missing the required parameter 'address_id' when calling FundApi.create_fund_operation"
      end
      # verify the required parameter 'create_fund_operation_request' is set
      if @api_client.config.client_side_validation && create_fund_operation_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_fund_operation_request' when calling FundApi.create_fund_operation"
      end
      # resource path
      local_var_path = '/v1/wallets/{wallet_id}/addresses/{address_id}/fund_operations'.sub('{' + 'wallet_id' + '}', CGI.escape(wallet_id.to_s)).sub('{' + 'address_id' + '}', CGI.escape(address_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_fund_operation_request)

      # return_type
      return_type = opts[:debug_return_type] || 'FundOperation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"FundApi.create_fund_operation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundApi#create_fund_operation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Fund Operation quote.
    # Create a new fund operation with an address.
    # @param wallet_id [String] The ID of the wallet the address belongs to.
    # @param address_id [String] The onchain address to be funded.
    # @param create_fund_quote_request [CreateFundQuoteRequest] 
    # @param [Hash] opts the optional parameters
    # @return [FundQuote]
    def create_fund_quote(wallet_id, address_id, create_fund_quote_request, opts = {})
      data, _status_code, _headers = create_fund_quote_with_http_info(wallet_id, address_id, create_fund_quote_request, opts)
      data
    end

    # Create a Fund Operation quote.
    # Create a new fund operation with an address.
    # @param wallet_id [String] The ID of the wallet the address belongs to.
    # @param address_id [String] The onchain address to be funded.
    # @param create_fund_quote_request [CreateFundQuoteRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundQuote, Integer, Hash)>] FundQuote data, response status code and response headers
    def create_fund_quote_with_http_info(wallet_id, address_id, create_fund_quote_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundApi.create_fund_quote ...'
      end
      # verify the required parameter 'wallet_id' is set
      if @api_client.config.client_side_validation && wallet_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_id' when calling FundApi.create_fund_quote"
      end
      # verify the required parameter 'address_id' is set
      if @api_client.config.client_side_validation && address_id.nil?
        fail ArgumentError, "Missing the required parameter 'address_id' when calling FundApi.create_fund_quote"
      end
      # verify the required parameter 'create_fund_quote_request' is set
      if @api_client.config.client_side_validation && create_fund_quote_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_fund_quote_request' when calling FundApi.create_fund_quote"
      end
      # resource path
      local_var_path = '/v1/wallets/{wallet_id}/addresses/{address_id}/fund_operations/quote'.sub('{' + 'wallet_id' + '}', CGI.escape(wallet_id.to_s)).sub('{' + 'address_id' + '}', CGI.escape(address_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_fund_quote_request)

      # return_type
      return_type = opts[:debug_return_type] || 'FundQuote'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"FundApi.create_fund_quote",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundApi#create_fund_quote\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get fund operation.
    # Get fund operation.
    # @param wallet_id [String] The ID of the wallet the address belongs to.
    # @param address_id [String] The onchain address of the address that created the fund operation.
    # @param fund_operation_id [String] The ID of the fund operation to fetch.
    # @param [Hash] opts the optional parameters
    # @return [FundOperation]
    def get_fund_operation(wallet_id, address_id, fund_operation_id, opts = {})
      data, _status_code, _headers = get_fund_operation_with_http_info(wallet_id, address_id, fund_operation_id, opts)
      data
    end

    # Get fund operation.
    # Get fund operation.
    # @param wallet_id [String] The ID of the wallet the address belongs to.
    # @param address_id [String] The onchain address of the address that created the fund operation.
    # @param fund_operation_id [String] The ID of the fund operation to fetch.
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundOperation, Integer, Hash)>] FundOperation data, response status code and response headers
    def get_fund_operation_with_http_info(wallet_id, address_id, fund_operation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundApi.get_fund_operation ...'
      end
      # verify the required parameter 'wallet_id' is set
      if @api_client.config.client_side_validation && wallet_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_id' when calling FundApi.get_fund_operation"
      end
      # verify the required parameter 'address_id' is set
      if @api_client.config.client_side_validation && address_id.nil?
        fail ArgumentError, "Missing the required parameter 'address_id' when calling FundApi.get_fund_operation"
      end
      # verify the required parameter 'fund_operation_id' is set
      if @api_client.config.client_side_validation && fund_operation_id.nil?
        fail ArgumentError, "Missing the required parameter 'fund_operation_id' when calling FundApi.get_fund_operation"
      end
      # resource path
      local_var_path = '/v1/wallets/{wallet_id}/addresses/{address_id}/fund_operations/{fund_operation_id}'.sub('{' + 'wallet_id' + '}', CGI.escape(wallet_id.to_s)).sub('{' + 'address_id' + '}', CGI.escape(address_id.to_s)).sub('{' + 'fund_operation_id' + '}', CGI.escape(fund_operation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FundOperation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'session']

      new_options = opts.merge(
        :operation => :"FundApi.get_fund_operation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundApi#get_fund_operation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List fund operations for an address.
    # List fund operations for an address.
    # @param wallet_id [String] The ID of the wallet the address belongs to.
    # @param address_id [String] The onchain address of the address to list fund operations for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @option opts [String] :page A cursor for pagination across multiple pages of results. Don&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @return [FundOperationList]
    def list_fund_operations(wallet_id, address_id, opts = {})
      data, _status_code, _headers = list_fund_operations_with_http_info(wallet_id, address_id, opts)
      data
    end

    # List fund operations for an address.
    # List fund operations for an address.
    # @param wallet_id [String] The ID of the wallet the address belongs to.
    # @param address_id [String] The onchain address of the address to list fund operations for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    # @option opts [String] :page A cursor for pagination across multiple pages of results. Don&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @return [Array<(FundOperationList, Integer, Hash)>] FundOperationList data, response status code and response headers
    def list_fund_operations_with_http_info(wallet_id, address_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundApi.list_fund_operations ...'
      end
      # verify the required parameter 'wallet_id' is set
      if @api_client.config.client_side_validation && wallet_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_id' when calling FundApi.list_fund_operations"
      end
      # verify the required parameter 'address_id' is set
      if @api_client.config.client_side_validation && address_id.nil?
        fail ArgumentError, "Missing the required parameter 'address_id' when calling FundApi.list_fund_operations"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'].to_s.length > 5000
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling FundApi.list_fund_operations, the character length must be smaller than or equal to 5000.'
      end

      # resource path
      local_var_path = '/v1/wallets/{wallet_id}/addresses/{address_id}/fund_operations'.sub('{' + 'wallet_id' + '}', CGI.escape(wallet_id.to_s)).sub('{' + 'address_id' + '}', CGI.escape(address_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FundOperationList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'session']

      new_options = opts.merge(
        :operation => :"FundApi.list_fund_operations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundApi#list_fund_operations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
