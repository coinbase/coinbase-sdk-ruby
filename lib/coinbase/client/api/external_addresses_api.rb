=begin
#Coinbase Platform API

#This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

The version of the OpenAPI document: 0.0.1-alpha

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module Coinbase::Client
  class ExternalAddressesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Broadcast an external address' transfer
    # Broadcast an external address's transfer with a signed payload
    # @param network_id [String] The ID of the network the address belongs to
    # @param address_id [String] The ID of the address the transfer belongs to
    # @param transfer_id [String] The ID of the transfer to broadcast
    # @param broadcast_external_transfer_request [BroadcastExternalTransferRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Transfer]
    def broadcast_external_transfer(network_id, address_id, transfer_id, broadcast_external_transfer_request, opts = {})
      data, _status_code, _headers = broadcast_external_transfer_with_http_info(network_id, address_id, transfer_id, broadcast_external_transfer_request, opts)
      data
    end

    # Broadcast an external address&#39; transfer
    # Broadcast an external address&#39;s transfer with a signed payload
    # @param network_id [String] The ID of the network the address belongs to
    # @param address_id [String] The ID of the address the transfer belongs to
    # @param transfer_id [String] The ID of the transfer to broadcast
    # @param broadcast_external_transfer_request [BroadcastExternalTransferRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Transfer, Integer, Hash)>] Transfer data, response status code and response headers
    def broadcast_external_transfer_with_http_info(network_id, address_id, transfer_id, broadcast_external_transfer_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalAddressesApi.broadcast_external_transfer ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_id' when calling ExternalAddressesApi.broadcast_external_transfer"
      end
      # verify the required parameter 'address_id' is set
      if @api_client.config.client_side_validation && address_id.nil?
        fail ArgumentError, "Missing the required parameter 'address_id' when calling ExternalAddressesApi.broadcast_external_transfer"
      end
      # verify the required parameter 'transfer_id' is set
      if @api_client.config.client_side_validation && transfer_id.nil?
        fail ArgumentError, "Missing the required parameter 'transfer_id' when calling ExternalAddressesApi.broadcast_external_transfer"
      end
      # verify the required parameter 'broadcast_external_transfer_request' is set
      if @api_client.config.client_side_validation && broadcast_external_transfer_request.nil?
        fail ArgumentError, "Missing the required parameter 'broadcast_external_transfer_request' when calling ExternalAddressesApi.broadcast_external_transfer"
      end
      # resource path
      local_var_path = '/v1/networks/{network_id}/addresses/{address_id}/transfers/{transfer_id}/broadcast'.sub('{' + 'network_id' + '}', CGI.escape(network_id.to_s)).sub('{' + 'address_id' + '}', CGI.escape(address_id.to_s)).sub('{' + 'transfer_id' + '}', CGI.escape(transfer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(broadcast_external_transfer_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Transfer'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"ExternalAddressesApi.broadcast_external_transfer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalAddressesApi#broadcast_external_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new transfer
    # Create a new transfer between addresses.
    # @param network_id [String] The ID of the network the address is on
    # @param address_id [String] The ID of the address to transfer from
    # @param create_external_transfer_request [CreateExternalTransferRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Transfer]
    def create_external_transfer(network_id, address_id, create_external_transfer_request, opts = {})
      data, _status_code, _headers = create_external_transfer_with_http_info(network_id, address_id, create_external_transfer_request, opts)
      data
    end

    # Create a new transfer
    # Create a new transfer between addresses.
    # @param network_id [String] The ID of the network the address is on
    # @param address_id [String] The ID of the address to transfer from
    # @param create_external_transfer_request [CreateExternalTransferRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Transfer, Integer, Hash)>] Transfer data, response status code and response headers
    def create_external_transfer_with_http_info(network_id, address_id, create_external_transfer_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalAddressesApi.create_external_transfer ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_id' when calling ExternalAddressesApi.create_external_transfer"
      end
      # verify the required parameter 'address_id' is set
      if @api_client.config.client_side_validation && address_id.nil?
        fail ArgumentError, "Missing the required parameter 'address_id' when calling ExternalAddressesApi.create_external_transfer"
      end
      # verify the required parameter 'create_external_transfer_request' is set
      if @api_client.config.client_side_validation && create_external_transfer_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_external_transfer_request' when calling ExternalAddressesApi.create_external_transfer"
      end
      # resource path
      local_var_path = '/v1/networks/{network_id}/addresses/{address_id}/transfers'.sub('{' + 'network_id' + '}', CGI.escape(network_id.to_s)).sub('{' + 'address_id' + '}', CGI.escape(address_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_external_transfer_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Transfer'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"ExternalAddressesApi.create_external_transfer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalAddressesApi#create_external_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the balance of an asset in an external address
    # Get the balance of an asset in an external address
    # @param network_id [String] The ID of the blockchain network
    # @param address_id [String] The ID of the address to fetch the balance for
    # @param asset_id [String] The ID of the asset to fetch the balance for
    # @param [Hash] opts the optional parameters
    # @return [Balance]
    def get_external_address_balance(network_id, address_id, asset_id, opts = {})
      data, _status_code, _headers = get_external_address_balance_with_http_info(network_id, address_id, asset_id, opts)
      data
    end

    # Get the balance of an asset in an external address
    # Get the balance of an asset in an external address
    # @param network_id [String] The ID of the blockchain network
    # @param address_id [String] The ID of the address to fetch the balance for
    # @param asset_id [String] The ID of the asset to fetch the balance for
    # @param [Hash] opts the optional parameters
    # @return [Array<(Balance, Integer, Hash)>] Balance data, response status code and response headers
    def get_external_address_balance_with_http_info(network_id, address_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalAddressesApi.get_external_address_balance ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_id' when calling ExternalAddressesApi.get_external_address_balance"
      end
      # verify the required parameter 'address_id' is set
      if @api_client.config.client_side_validation && address_id.nil?
        fail ArgumentError, "Missing the required parameter 'address_id' when calling ExternalAddressesApi.get_external_address_balance"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling ExternalAddressesApi.get_external_address_balance"
      end
      # resource path
      local_var_path = '/v1/networks/{network_id}/addresses/{address_id}/balances/{asset_id}'.sub('{' + 'network_id' + '}', CGI.escape(network_id.to_s)).sub('{' + 'address_id' + '}', CGI.escape(address_id.to_s)).sub('{' + 'asset_id' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Balance'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'session']

      new_options = opts.merge(
        :operation => :"ExternalAddressesApi.get_external_address_balance",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalAddressesApi#get_external_address_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a external address' transfer
    # Get an external address' transfer by ID
    # @param network_id [String] The ID of the network the address is on
    # @param address_id [String] The ID of the address the transfer belongs to
    # @param transfer_id [String] The ID of the transfer to fetch
    # @param [Hash] opts the optional parameters
    # @return [Transfer]
    def get_external_transfer(network_id, address_id, transfer_id, opts = {})
      data, _status_code, _headers = get_external_transfer_with_http_info(network_id, address_id, transfer_id, opts)
      data
    end

    # Get a external address&#39; transfer
    # Get an external address&#39; transfer by ID
    # @param network_id [String] The ID of the network the address is on
    # @param address_id [String] The ID of the address the transfer belongs to
    # @param transfer_id [String] The ID of the transfer to fetch
    # @param [Hash] opts the optional parameters
    # @return [Array<(Transfer, Integer, Hash)>] Transfer data, response status code and response headers
    def get_external_transfer_with_http_info(network_id, address_id, transfer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalAddressesApi.get_external_transfer ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_id' when calling ExternalAddressesApi.get_external_transfer"
      end
      # verify the required parameter 'address_id' is set
      if @api_client.config.client_side_validation && address_id.nil?
        fail ArgumentError, "Missing the required parameter 'address_id' when calling ExternalAddressesApi.get_external_transfer"
      end
      # verify the required parameter 'transfer_id' is set
      if @api_client.config.client_side_validation && transfer_id.nil?
        fail ArgumentError, "Missing the required parameter 'transfer_id' when calling ExternalAddressesApi.get_external_transfer"
      end
      # resource path
      local_var_path = '/v1/networks/{network_id}/addresses/{address_id}/transfers/{transfer_id}'.sub('{' + 'network_id' + '}', CGI.escape(network_id.to_s)).sub('{' + 'address_id' + '}', CGI.escape(address_id.to_s)).sub('{' + 'transfer_id' + '}', CGI.escape(transfer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Transfer'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"ExternalAddressesApi.get_external_transfer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalAddressesApi#get_external_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the status of a faucet transaction
    # Get the status of a faucet transaction
    # @param network_id [String] The ID of the blockchain network
    # @param address_id [String] The ID of the address to fetch the faucet transaction for
    # @param tx_hash [String] The hash of the faucet transaction
    # @param [Hash] opts the optional parameters
    # @return [FaucetTransaction]
    def get_faucet_transaction(network_id, address_id, tx_hash, opts = {})
      data, _status_code, _headers = get_faucet_transaction_with_http_info(network_id, address_id, tx_hash, opts)
      data
    end

    # Get the status of a faucet transaction
    # Get the status of a faucet transaction
    # @param network_id [String] The ID of the blockchain network
    # @param address_id [String] The ID of the address to fetch the faucet transaction for
    # @param tx_hash [String] The hash of the faucet transaction
    # @param [Hash] opts the optional parameters
    # @return [Array<(FaucetTransaction, Integer, Hash)>] FaucetTransaction data, response status code and response headers
    def get_faucet_transaction_with_http_info(network_id, address_id, tx_hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalAddressesApi.get_faucet_transaction ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_id' when calling ExternalAddressesApi.get_faucet_transaction"
      end
      # verify the required parameter 'address_id' is set
      if @api_client.config.client_side_validation && address_id.nil?
        fail ArgumentError, "Missing the required parameter 'address_id' when calling ExternalAddressesApi.get_faucet_transaction"
      end
      # verify the required parameter 'tx_hash' is set
      if @api_client.config.client_side_validation && tx_hash.nil?
        fail ArgumentError, "Missing the required parameter 'tx_hash' when calling ExternalAddressesApi.get_faucet_transaction"
      end
      # resource path
      local_var_path = '/v1/networks/{network_id}/addresses/{address_id}/faucet/{tx_hash}'.sub('{' + 'network_id' + '}', CGI.escape(network_id.to_s)).sub('{' + 'address_id' + '}', CGI.escape(address_id.to_s)).sub('{' + 'tx_hash' + '}', CGI.escape(tx_hash.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FaucetTransaction'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'session']

      new_options = opts.merge(
        :operation => :"ExternalAddressesApi.get_faucet_transaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalAddressesApi#get_faucet_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the balances of an external address
    # List all of the balances of an external address
    # @param network_id [String] The ID of the blockchain network
    # @param address_id [String] The ID of the address to fetch the balance for
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page A cursor for pagination across multiple pages of results. Don&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @return [AddressBalanceList]
    def list_external_address_balances(network_id, address_id, opts = {})
      data, _status_code, _headers = list_external_address_balances_with_http_info(network_id, address_id, opts)
      data
    end

    # Get the balances of an external address
    # List all of the balances of an external address
    # @param network_id [String] The ID of the blockchain network
    # @param address_id [String] The ID of the address to fetch the balance for
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page A cursor for pagination across multiple pages of results. Don&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    # @return [Array<(AddressBalanceList, Integer, Hash)>] AddressBalanceList data, response status code and response headers
    def list_external_address_balances_with_http_info(network_id, address_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalAddressesApi.list_external_address_balances ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_id' when calling ExternalAddressesApi.list_external_address_balances"
      end
      # verify the required parameter 'address_id' is set
      if @api_client.config.client_side_validation && address_id.nil?
        fail ArgumentError, "Missing the required parameter 'address_id' when calling ExternalAddressesApi.list_external_address_balances"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'].to_s.length > 5000
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ExternalAddressesApi.list_external_address_balances, the character length must be smaller than or equal to 5000.'
      end

      # resource path
      local_var_path = '/v1/networks/{network_id}/addresses/{address_id}/balances'.sub('{' + 'network_id' + '}', CGI.escape(network_id.to_s)).sub('{' + 'address_id' + '}', CGI.escape(address_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AddressBalanceList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'session']

      new_options = opts.merge(
        :operation => :"ExternalAddressesApi.list_external_address_balances",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalAddressesApi#list_external_address_balances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Request faucet funds for external address.
    # Request faucet funds to be sent to external address.
    # @param network_id [String] The ID of the wallet the address belongs to.
    # @param address_id [String] The onchain address of the address that is being fetched.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :asset_id The ID of the asset to transfer from the faucet.
    # @option opts [Boolean] :skip_wait Whether to skip waiting for the transaction to be mined. This will become the default behavior in the future.
    # @return [FaucetTransaction]
    def request_external_faucet_funds(network_id, address_id, opts = {})
      data, _status_code, _headers = request_external_faucet_funds_with_http_info(network_id, address_id, opts)
      data
    end

    # Request faucet funds for external address.
    # Request faucet funds to be sent to external address.
    # @param network_id [String] The ID of the wallet the address belongs to.
    # @param address_id [String] The onchain address of the address that is being fetched.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :asset_id The ID of the asset to transfer from the faucet.
    # @option opts [Boolean] :skip_wait Whether to skip waiting for the transaction to be mined. This will become the default behavior in the future.
    # @return [Array<(FaucetTransaction, Integer, Hash)>] FaucetTransaction data, response status code and response headers
    def request_external_faucet_funds_with_http_info(network_id, address_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExternalAddressesApi.request_external_faucet_funds ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_id' when calling ExternalAddressesApi.request_external_faucet_funds"
      end
      # verify the required parameter 'address_id' is set
      if @api_client.config.client_side_validation && address_id.nil?
        fail ArgumentError, "Missing the required parameter 'address_id' when calling ExternalAddressesApi.request_external_faucet_funds"
      end
      # resource path
      local_var_path = '/v1/networks/{network_id}/addresses/{address_id}/faucet'.sub('{' + 'network_id' + '}', CGI.escape(network_id.to_s)).sub('{' + 'address_id' + '}', CGI.escape(address_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'asset_id'] = opts[:'asset_id'] if !opts[:'asset_id'].nil?
      query_params[:'skip_wait'] = opts[:'skip_wait'] if !opts[:'skip_wait'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FaucetTransaction'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'session']

      new_options = opts.merge(
        :operation => :"ExternalAddressesApi.request_external_faucet_funds",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExternalAddressesApi#request_external_faucet_funds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
