=begin
#Coinbase Platform API

#This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

The version of the OpenAPI document: 0.0.1-alpha
Contact: yuga.cohler@coinbase.com
Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'cgi'

module Coinbase::Client
  class ServerSignersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new Server-Signer
    # Create a new Server-Signer
    # @param [Hash] opts the optional parameters
    # @option opts [CreateServerSignerRequest] :create_server_signer_request 
    # @return [ServerSigner]
    def create_server_signer(opts = {})
      data, _status_code, _headers = create_server_signer_with_http_info(opts)
      data
    end

    # Create a new Server-Signer
    # Create a new Server-Signer
    # @param [Hash] opts the optional parameters
    # @option opts [CreateServerSignerRequest] :create_server_signer_request 
    # @return [Array<(ServerSigner, Integer, Hash)>] ServerSigner data, response status code and response headers
    def create_server_signer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServerSignersApi.create_server_signer ...'
      end
      # resource path
      local_var_path = '/v1/server_signers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_server_signer_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ServerSigner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ServerSignersApi.create_server_signer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServerSignersApi#create_server_signer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a server signer by ID
    # Get a server signer by ID
    # @param server_signer_id [String] The ID of the server signer to fetch
    # @param [Hash] opts the optional parameters
    # @return [ServerSigner]
    def get_server_signer(server_signer_id, opts = {})
      data, _status_code, _headers = get_server_signer_with_http_info(server_signer_id, opts)
      data
    end

    # Get a server signer by ID
    # Get a server signer by ID
    # @param server_signer_id [String] The ID of the server signer to fetch
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerSigner, Integer, Hash)>] ServerSigner data, response status code and response headers
    def get_server_signer_with_http_info(server_signer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServerSignersApi.get_server_signer ...'
      end
      # verify the required parameter 'server_signer_id' is set
      if @api_client.config.client_side_validation && server_signer_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_signer_id' when calling ServerSignersApi.get_server_signer"
      end
      # resource path
      local_var_path = '/v1/server_signers/{server_signer_id}'.sub('{' + 'server_signer_id' + '}', CGI.escape(server_signer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServerSigner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ServerSignersApi.get_server_signer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServerSignersApi#get_server_signer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List events for a server signer
    # List events for a server signer
    # @param server_signer_id [String] The ID of the server signer to fetch events for
    # @param [Hash] opts the optional parameters
    # @return [ServerSignerEvent]
    def list_server_signer_events(server_signer_id, opts = {})
      data, _status_code, _headers = list_server_signer_events_with_http_info(server_signer_id, opts)
      data
    end

    # List events for a server signer
    # List events for a server signer
    # @param server_signer_id [String] The ID of the server signer to fetch events for
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerSignerEvent, Integer, Hash)>] ServerSignerEvent data, response status code and response headers
    def list_server_signer_events_with_http_info(server_signer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServerSignersApi.list_server_signer_events ...'
      end
      # verify the required parameter 'server_signer_id' is set
      if @api_client.config.client_side_validation && server_signer_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_signer_id' when calling ServerSignersApi.list_server_signer_events"
      end
      # resource path
      local_var_path = '/v1/server_signers/{server_signer_id}/events'.sub('{' + 'server_signer_id' + '}', CGI.escape(server_signer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServerSignerEvent'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ServerSignersApi.list_server_signer_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServerSignersApi#list_server_signer_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List server signers for the current project
    # List server signers for the current project
    # @param [Hash] opts the optional parameters
    # @return [ServerSigner]
    def list_server_signers(opts = {})
      data, _status_code, _headers = list_server_signers_with_http_info(opts)
      data
    end

    # List server signers for the current project
    # List server signers for the current project
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServerSigner, Integer, Hash)>] ServerSigner data, response status code and response headers
    def list_server_signers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServerSignersApi.list_server_signers ...'
      end
      # resource path
      local_var_path = '/v1/server_signers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServerSigner'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ServerSignersApi.list_server_signers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServerSignersApi#list_server_signers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
