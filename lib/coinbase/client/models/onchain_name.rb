=begin
#Coinbase Platform API

#This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

The version of the OpenAPI document: 0.0.1-alpha

Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module Coinbase::Client
  # A representation of an onchain stored name from name systems i.e. ENS or Basenames
  class OnchainName
    # The ID for the NFT related to this name
    attr_accessor :token_id

    # The onchain address of the owner of the name
    attr_accessor :owner_address

    # The onchain address of the manager of the name
    attr_accessor :manager_address

    # The primary onchain address of the name
    attr_accessor :primary_address

    # The readable format for the name in complete form
    attr_accessor :domain

    # The visual representation attached to this name
    attr_accessor :avatar

    # The ID of the blockchain network
    attr_accessor :network_id

    # The expiration date for this name's ownership
    attr_accessor :expires_at

    # The metadata attached to this name
    attr_accessor :text_records

    # Whether this name is the primary name for the owner (This is when the ETH coin address for this name is equal to the primary_address. More info here https://docs.ens.domains/ensip/19)
    attr_accessor :is_primary

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'token_id' => :'token_id',
        :'owner_address' => :'owner_address',
        :'manager_address' => :'manager_address',
        :'primary_address' => :'primary_address',
        :'domain' => :'domain',
        :'avatar' => :'avatar',
        :'network_id' => :'network_id',
        :'expires_at' => :'expires_at',
        :'text_records' => :'text_records',
        :'is_primary' => :'is_primary'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'token_id' => :'String',
        :'owner_address' => :'String',
        :'manager_address' => :'String',
        :'primary_address' => :'String',
        :'domain' => :'String',
        :'avatar' => :'String',
        :'network_id' => :'String',
        :'expires_at' => :'Time',
        :'text_records' => :'Hash<String, String>',
        :'is_primary' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Coinbase::Client::OnchainName` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Coinbase::Client::OnchainName`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'token_id')
        self.token_id = attributes[:'token_id']
      else
        self.token_id = nil
      end

      if attributes.key?(:'owner_address')
        self.owner_address = attributes[:'owner_address']
      else
        self.owner_address = nil
      end

      if attributes.key?(:'manager_address')
        self.manager_address = attributes[:'manager_address']
      else
        self.manager_address = nil
      end

      if attributes.key?(:'primary_address')
        self.primary_address = attributes[:'primary_address']
      end

      if attributes.key?(:'domain')
        self.domain = attributes[:'domain']
      else
        self.domain = nil
      end

      if attributes.key?(:'avatar')
        self.avatar = attributes[:'avatar']
      end

      if attributes.key?(:'network_id')
        self.network_id = attributes[:'network_id']
      else
        self.network_id = nil
      end

      if attributes.key?(:'expires_at')
        self.expires_at = attributes[:'expires_at']
      else
        self.expires_at = nil
      end

      if attributes.key?(:'text_records')
        if (value = attributes[:'text_records']).is_a?(Hash)
          self.text_records = value
        end
      end

      if attributes.key?(:'is_primary')
        self.is_primary = attributes[:'is_primary']
      else
        self.is_primary = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @token_id.nil?
        invalid_properties.push('invalid value for "token_id", token_id cannot be nil.')
      end

      if @owner_address.nil?
        invalid_properties.push('invalid value for "owner_address", owner_address cannot be nil.')
      end

      if @manager_address.nil?
        invalid_properties.push('invalid value for "manager_address", manager_address cannot be nil.')
      end

      if @domain.nil?
        invalid_properties.push('invalid value for "domain", domain cannot be nil.')
      end

      if @network_id.nil?
        invalid_properties.push('invalid value for "network_id", network_id cannot be nil.')
      end

      if @expires_at.nil?
        invalid_properties.push('invalid value for "expires_at", expires_at cannot be nil.')
      end

      if @is_primary.nil?
        invalid_properties.push('invalid value for "is_primary", is_primary cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @token_id.nil?
      return false if @owner_address.nil?
      return false if @manager_address.nil?
      return false if @domain.nil?
      return false if @network_id.nil?
      return false if @expires_at.nil?
      return false if @is_primary.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          token_id == o.token_id &&
          owner_address == o.owner_address &&
          manager_address == o.manager_address &&
          primary_address == o.primary_address &&
          domain == o.domain &&
          avatar == o.avatar &&
          network_id == o.network_id &&
          expires_at == o.expires_at &&
          text_records == o.text_records &&
          is_primary == o.is_primary
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [token_id, owner_address, manager_address, primary_address, domain, avatar, network_id, expires_at, text_records, is_primary].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Coinbase::Client.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
