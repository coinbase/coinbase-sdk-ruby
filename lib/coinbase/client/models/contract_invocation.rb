=begin
#Coinbase Platform API

#This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

The version of the OpenAPI document: 0.0.1-alpha

Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module Coinbase::Client
  # A contract invocation onchain.
  class ContractInvocation
    # The ID of the blockchain network.
    attr_accessor :network_id

    # The ID of the wallet that owns the address.
    attr_accessor :wallet_id

    # The onchain address of the address invoking the contract.
    attr_accessor :address_id

    # The ID of the contract invocation.
    attr_accessor :contract_invocation_id

    # The onchain address of the contract.
    attr_accessor :contract_address

    # The method to be invoked on the contract.
    attr_accessor :method

    # The JSON-encoded arguments to pass to the contract method. The keys should be the argument names and the values should be the argument values.
    attr_accessor :args

    # The JSON-encoded ABI of the contract.
    attr_accessor :abi

    # The amount to send to the contract for a payable method
    attr_accessor :amount

    attr_accessor :transaction

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'network_id' => :'network_id',
        :'wallet_id' => :'wallet_id',
        :'address_id' => :'address_id',
        :'contract_invocation_id' => :'contract_invocation_id',
        :'contract_address' => :'contract_address',
        :'method' => :'method',
        :'args' => :'args',
        :'abi' => :'abi',
        :'amount' => :'amount',
        :'transaction' => :'transaction'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'network_id' => :'String',
        :'wallet_id' => :'String',
        :'address_id' => :'String',
        :'contract_invocation_id' => :'String',
        :'contract_address' => :'String',
        :'method' => :'String',
        :'args' => :'String',
        :'abi' => :'String',
        :'amount' => :'String',
        :'transaction' => :'Transaction'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Coinbase::Client::ContractInvocation` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Coinbase::Client::ContractInvocation`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'network_id')
        self.network_id = attributes[:'network_id']
      else
        self.network_id = nil
      end

      if attributes.key?(:'wallet_id')
        self.wallet_id = attributes[:'wallet_id']
      else
        self.wallet_id = nil
      end

      if attributes.key?(:'address_id')
        self.address_id = attributes[:'address_id']
      else
        self.address_id = nil
      end

      if attributes.key?(:'contract_invocation_id')
        self.contract_invocation_id = attributes[:'contract_invocation_id']
      else
        self.contract_invocation_id = nil
      end

      if attributes.key?(:'contract_address')
        self.contract_address = attributes[:'contract_address']
      else
        self.contract_address = nil
      end

      if attributes.key?(:'method')
        self.method = attributes[:'method']
      else
        self.method = nil
      end

      if attributes.key?(:'args')
        self.args = attributes[:'args']
      else
        self.args = nil
      end

      if attributes.key?(:'abi')
        self.abi = attributes[:'abi']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      else
        self.amount = nil
      end

      if attributes.key?(:'transaction')
        self.transaction = attributes[:'transaction']
      else
        self.transaction = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @network_id.nil?
        invalid_properties.push('invalid value for "network_id", network_id cannot be nil.')
      end

      if @wallet_id.nil?
        invalid_properties.push('invalid value for "wallet_id", wallet_id cannot be nil.')
      end

      if @address_id.nil?
        invalid_properties.push('invalid value for "address_id", address_id cannot be nil.')
      end

      if @contract_invocation_id.nil?
        invalid_properties.push('invalid value for "contract_invocation_id", contract_invocation_id cannot be nil.')
      end

      if @contract_address.nil?
        invalid_properties.push('invalid value for "contract_address", contract_address cannot be nil.')
      end

      if @method.nil?
        invalid_properties.push('invalid value for "method", method cannot be nil.')
      end

      if @args.nil?
        invalid_properties.push('invalid value for "args", args cannot be nil.')
      end

      if @amount.nil?
        invalid_properties.push('invalid value for "amount", amount cannot be nil.')
      end

      if @transaction.nil?
        invalid_properties.push('invalid value for "transaction", transaction cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @network_id.nil?
      return false if @wallet_id.nil?
      return false if @address_id.nil?
      return false if @contract_invocation_id.nil?
      return false if @contract_address.nil?
      return false if @method.nil?
      return false if @args.nil?
      return false if @amount.nil?
      return false if @transaction.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          network_id == o.network_id &&
          wallet_id == o.wallet_id &&
          address_id == o.address_id &&
          contract_invocation_id == o.contract_invocation_id &&
          contract_address == o.contract_address &&
          method == o.method &&
          args == o.args &&
          abi == o.abi &&
          amount == o.amount &&
          transaction == o.transaction
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [network_id, wallet_id, address_id, contract_invocation_id, contract_address, method, args, abi, amount, transaction].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Coinbase::Client.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
