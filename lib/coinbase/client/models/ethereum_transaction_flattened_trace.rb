=begin
#Coinbase Platform API

#This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

The version of the OpenAPI document: 0.0.1-alpha

Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module Coinbase::Client
  class EthereumTransactionFlattenedTrace
    attr_accessor :error

    attr_accessor :type

    attr_accessor :from

    attr_accessor :to

    attr_accessor :value

    attr_accessor :gas

    attr_accessor :gas_used

    attr_accessor :input

    attr_accessor :output

    attr_accessor :sub_traces

    attr_accessor :trace_address

    attr_accessor :trace_type

    attr_accessor :call_type

    attr_accessor :trace_id

    attr_accessor :status

    attr_accessor :block_hash

    attr_accessor :block_number

    attr_accessor :transaction_hash

    attr_accessor :transaction_index

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'error' => :'error',
        :'type' => :'type',
        :'from' => :'from',
        :'to' => :'to',
        :'value' => :'value',
        :'gas' => :'gas',
        :'gas_used' => :'gas_used',
        :'input' => :'input',
        :'output' => :'output',
        :'sub_traces' => :'sub_traces',
        :'trace_address' => :'trace_address',
        :'trace_type' => :'trace_type',
        :'call_type' => :'call_type',
        :'trace_id' => :'trace_id',
        :'status' => :'status',
        :'block_hash' => :'block_hash',
        :'block_number' => :'block_number',
        :'transaction_hash' => :'transaction_hash',
        :'transaction_index' => :'transaction_index'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'error' => :'String',
        :'type' => :'String',
        :'from' => :'String',
        :'to' => :'String',
        :'value' => :'String',
        :'gas' => :'Integer',
        :'gas_used' => :'Integer',
        :'input' => :'String',
        :'output' => :'String',
        :'sub_traces' => :'Integer',
        :'trace_address' => :'Array<Integer>',
        :'trace_type' => :'String',
        :'call_type' => :'String',
        :'trace_id' => :'String',
        :'status' => :'Integer',
        :'block_hash' => :'String',
        :'block_number' => :'Integer',
        :'transaction_hash' => :'String',
        :'transaction_index' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Coinbase::Client::EthereumTransactionFlattenedTrace` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Coinbase::Client::EthereumTransactionFlattenedTrace`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'error')
        self.error = attributes[:'error']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'from')
        self.from = attributes[:'from']
      end

      if attributes.key?(:'to')
        self.to = attributes[:'to']
      end

      if attributes.key?(:'value')
        self.value = attributes[:'value']
      end

      if attributes.key?(:'gas')
        self.gas = attributes[:'gas']
      end

      if attributes.key?(:'gas_used')
        self.gas_used = attributes[:'gas_used']
      end

      if attributes.key?(:'input')
        self.input = attributes[:'input']
      end

      if attributes.key?(:'output')
        self.output = attributes[:'output']
      end

      if attributes.key?(:'sub_traces')
        self.sub_traces = attributes[:'sub_traces']
      end

      if attributes.key?(:'trace_address')
        if (value = attributes[:'trace_address']).is_a?(Array)
          self.trace_address = value
        end
      end

      if attributes.key?(:'trace_type')
        self.trace_type = attributes[:'trace_type']
      end

      if attributes.key?(:'call_type')
        self.call_type = attributes[:'call_type']
      end

      if attributes.key?(:'trace_id')
        self.trace_id = attributes[:'trace_id']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'block_hash')
        self.block_hash = attributes[:'block_hash']
      end

      if attributes.key?(:'block_number')
        self.block_number = attributes[:'block_number']
      end

      if attributes.key?(:'transaction_hash')
        self.transaction_hash = attributes[:'transaction_hash']
      end

      if attributes.key?(:'transaction_index')
        self.transaction_index = attributes[:'transaction_index']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          error == o.error &&
          type == o.type &&
          from == o.from &&
          to == o.to &&
          value == o.value &&
          gas == o.gas &&
          gas_used == o.gas_used &&
          input == o.input &&
          output == o.output &&
          sub_traces == o.sub_traces &&
          trace_address == o.trace_address &&
          trace_type == o.trace_type &&
          call_type == o.call_type &&
          trace_id == o.trace_id &&
          status == o.status &&
          block_hash == o.block_hash &&
          block_number == o.block_number &&
          transaction_hash == o.transaction_hash &&
          transaction_index == o.transaction_index
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [error, type, from, to, value, gas, gas_used, input, output, sub_traces, trace_address, trace_type, call_type, trace_id, status, block_hash, block_number, transaction_hash, transaction_index].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Coinbase::Client.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
